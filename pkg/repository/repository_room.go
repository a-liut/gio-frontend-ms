/*
 * Frontend Service
 *
 * Frontend Microservice for the Gi√≤ Plants platform.
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package repository

import (
	"bytes"
	"encoding/json"
	"fmt"
	"gio-frontend-ms/pkg/model"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	"os"
)

type RoomRepository struct {
	devicesServiceUrl string
}

func (r *RoomRepository) Get(id string) (*model.Room, error) {
	u := fmt.Sprintf("%s/rooms/%s", r.devicesServiceUrl, id)

	resp, err := http.Get(u)

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return nil, nil
	} else if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error while getting data for device %s", id)
	}

	var room model.Room
	err = json.NewDecoder(resp.Body).Decode(&room)

	if err != nil {
		return nil, err
	}

	return &room, nil
}

func (r *RoomRepository) GetAll() ([]*model.Room, error) {
	u := fmt.Sprintf("%s/rooms", r.devicesServiceUrl)

	resp, err := http.Get(u)

	if err != nil {
		return nil, err
	}

	defer resp.Body.Close()

	if resp.StatusCode == 404 {
		return []*model.Room{}, nil
	} else if resp.StatusCode != 200 {
		return nil, fmt.Errorf("error while getting data for devices")
	}

	var rooms []*model.Room
	err = json.NewDecoder(resp.Body).Decode(&rooms)

	if err != nil {
		return nil, err
	}

	return rooms, nil
}

func (r *RoomRepository) Insert(roomData *model.Room) (*model.Room, error) {
	u := fmt.Sprintf("%s/rooms", r.devicesServiceUrl)

	b, err := json.Marshal(roomData)
	if err != nil {
		panic(err)
	}

	resp, err := http.Post(u, "application/json", bytes.NewBuffer(b))
	defer resp.Body.Close()

	if err != nil {
		return nil, err
	}

	if resp.StatusCode != 200 {
		body, _ := ioutil.ReadAll(resp.Body)
		return nil, fmt.Errorf("error while performing the operation: %d - %s - %s", resp.StatusCode, resp.Status, string(body))
	}

	var room model.Room
	err = json.NewDecoder(resp.Body).Decode(&room)

	if err != nil {
		return nil, err
	}

	return &room, nil
}

var roomRepository *RoomRepository

func NewRoomRepository() (*RoomRepository, error) {
	serviceHost := os.Getenv("API_GATEWAY_HOST")
	servicePort := os.Getenv("API_GATEWAY_PORT")

	if roomRepository == nil {
		u := fmt.Sprintf("http://%s:%s", serviceHost, servicePort)
		log.Printf("DeviceService URL: %s\n", u)

		serviceUrl, err := url.Parse(u)
		if err != nil {
			return nil, err
		}
		roomRepository = &RoomRepository{serviceUrl.String()}
	}

	return roomRepository, nil
}
