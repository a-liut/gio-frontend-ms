/*
 * Frontend Service
 *
 * Frontend Microservice for the Gi√≤ Plants platform.
 *
 * API version: 1.0.0
 * Contact: andrea.liut@gmail.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package api

import (
	"gio-frontend-ms/pkg/model"
	"gio-frontend-ms/pkg/repository"
	"github.com/gorilla/mux"
	"html/template"
	"log"
	"net/http"
)

var templates = template.Must(template.ParseGlob("static/html/*"))

func ListRooms(w http.ResponseWriter, _ *http.Request) {
	repo, _ := repository.NewRoomRepository()
	rooms, err := repo.GetAll()

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, "Cannot retrieve rooms")
		return
	}

	w.WriteHeader(http.StatusOK)

	data := ListRoomsPageData{
		Title: "Rooms",
		Rooms: rooms,
	}

	if err := templates.ExecuteTemplate(w, "rooms_list.html", data); err != nil {
		log.Println(err)
	}
}

func GetRoom(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	roomId := vars["roomId"]

	repo, _ := repository.NewRoomRepository()
	room, err := repo.Get(roomId)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, "Cannot retrieve room")
		return
	}

	if room == nil {
		errorHandler(w, http.StatusNotFound, "room not found")
		return
	}

	w.WriteHeader(http.StatusOK)

	data := RoomPageData{
		Title: "Room",
		Room:  room,
	}

	if err := templates.ExecuteTemplate(w, "room.html", data); err != nil {
		log.Println(err)
	}
}

func ListDevices(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	roomId := vars["roomId"]

	repo, _ := repository.NewDeviceRepository()
	devices, err := repo.GetAll(roomId)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, "Cannot retrieve devices")
		return
	}

	if devices == nil {
		errorHandler(w, http.StatusNotFound, "room not found")
		return
	}

	w.WriteHeader(http.StatusOK)

	data := ListDevicesPageData{
		Title:   "Devices",
		Devices: devices,
	}

	if err := templates.ExecuteTemplate(w, "devices_list.html", data); err != nil {
		log.Println(err)
	}
}

func GetDevice(w http.ResponseWriter, r *http.Request) {
	vars := mux.Vars(r)
	roomId := vars["roomId"]
	deviceId := vars["deviceId"]

	repo, _ := repository.NewDeviceRepository()
	device, err := repo.Get(roomId, deviceId)

	if err != nil {
		errorHandler(w, http.StatusInternalServerError, "Cannot retrieve devices")
		return
	}

	if device == nil {
		errorHandler(w, http.StatusNotFound, "Device not found")
		return
	}

	readings, err := repo.GetReadings(roomId, deviceId, -1, "")
	errorMessage := ""
	if err != nil {
		errorMessage = err.Error()
		readings = []*model.Reading{}
	}

	w.WriteHeader(http.StatusOK)

	data := DevicePageData{
		Title:        "Device",
		Device:       device,
		Readings:     readings,
		ErrorMessage: errorMessage,
	}

	if err := templates.ExecuteTemplate(w, "device.html", data); err != nil {
		log.Println(err)
	}
}
